/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ALT/ENT |   | HYPER/SPC | BKSP  | RSE |

            bindings = <
&tp LCTRL ESC     &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y      &kp U     &kp I      &kp O    &kp P     &kp LEFT_BRACKET
&tp LEFT_ALT TAB  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H      &kp J     &kp K      &kp L    &kp SEMI  &kp GRAVE
&kp LSHFT         &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N      &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp LC(SPACE)
                                &kp LGUI  &mo 1  &kp SPACE    &kp ENTER  &kp BSPC  &mo 2
            >;
        };

        symbols {
            // -----------------------------------------------------------------------------------------
            // |      |  !  |  @  |  #  |  $  |    %     |   |  ^  |  &  |  *  |  (  |  )  |   \   |
            // |      |  1  |  2  |  3  |  4  |    5     |   |  -  |  =  |  `  |  [  |  ]  |  "|"  |
            // | SHFT |  6  |  7  |  8  |  9  |    0     |   |  _  |  +  |  ~  |  {  |  }  | RSHFT |
            //                     | GUI |     | ALT/ENT |   | HYPER/SPACE | BKSP |    |

            bindings = <
&kp AMPERSAND   &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT       &kp LEFT_PARENTHESIS        &kp RIGHT_PARENTHESIS  &kp KP_MULTIPLY  &kp PLUS           &kp MINUS         &kp EQUAL
&kp CARET       &kp N1    &kp N2  &kp N3    &kp N4    &kp N5          &kp LEFT_BRACKET            &kp RIGHT_BRACKET      &kp COLON        &kp SEMICOLON      &kp UNDERSCORE    &kp PIPE
&kp LEFT_SHIFT  &kp N6    &kp N7  &kp N8    &kp N9    &kp N0          &kp LEFT_BRACE              &kp RIGHT_BRACE        &kp TILDE        &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp RSHFT
                                  &kp LGUI  &trans    &tp LALT RET    &tp LC(LS(LA(LGUI))) SPACE  &kp BSPC               &trans
            >;
        };

        layer_above {
            // -----------------------------------------------------------------------------------------
            // |       |  F1  |  F2  |  F3  |  F4  |  F5 |            |  F6  |  F7  |  F8  |  F9  |  F10  |   |
            // |       | Prev | Next | Vol - | Vol + | Play/Pause |   |      | LFT | DWN |  UP | RGT |     |     |
            // | BTCLR | BT1 | BT2 | BT3 | BT4 | BT5 |   |            |     |     |     |     |     |     |
            //                    |     |     |    |                  |     |     |     |

            bindings = <
&kp LS(LG(SPACE))  &kp C_BRI_DEC     &kp C_BRI_INC     &kp F3            &kp F4            &kp LC(LG(Q))       &kp F6     &kp F7          &kp F8              &kp C_MUTE           &kp C_VOL_DN        &kp C_VOL_UP
&kp LC(TAB)        &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(NUMBER_5)    &kp PG_UP  &kp UP_ARROW    &kp LEFT_ARROW      &kp RIGHT            &kp LG(LEFT_ARROW)  &kp LG(RIGHT)
&bt BT_CLR         &bt BT_SEL 0      &bt BT_SEL 1      &bt BT_SEL 2      &bt BT_SEL 3      &bt BT_SEL 4        &kp PG_DN  &kp DOWN_ARROW  &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)  &kp LS(LG(LEFT))    &kp LS(LG(RIGHT))
                                                       &kp LEFT_SHIFT    &trans            &trans              &trans     &trans          &trans
            >;
        };
    };
};
